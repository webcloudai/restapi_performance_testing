/**
 * Â© 2024 Daniil Sokolov <daniil.sokolov@webcloudai.com>
 * MIT License 
*/

import {
  APIGatewayProxyEvent, APIGatewayProxyResult,
  APIGatewayProxyEventStageVariables,
} from 'aws-lambda';
import { v4 as uuid4 } from "uuid";
import { S3Client, PutObjectCommand, DeleteObjectsCommand } from "@aws-sdk/client-s3";
import { promises as fs } from 'fs';
import path from 'path';

/**
 * Lambda Handler - the entry point for API GW invocations
 *
 * @param {APIGatewayProxyEvent} event - event generated by API GW
 * @returns Promise<APIGatewayProxyResult>
 */
export const lambdaHandler = async ( event: APIGatewayProxyEvent ): Promise<APIGatewayProxyResult> => {
  await new Promise(f => setTimeout(f, 300));
  // stringify incoming event
  let eventStr:string = "";
  try {
    eventStr = JSON.stringify(event);
  } catch (error) {
    return new Promise<APIGatewayProxyResult>((resolve, reject)=> {
        resolve({
            statusCode: 500,
            body: "fail to stringify incoming event",
            isBase64Encoded: false
        });
    });
  }
  // collect unneeded large object from JSON
  const filePath = path.join(__dirname, 'assets', "large_mock.json");
  try {
      const fileContent = await fs.readFile(filePath, 'utf8');
      const unneededObj = JSON.parse(fileContent);
  } catch (error) {
    return new Promise<APIGatewayProxyResult>((resolve, reject)=> {
      resolve({
          statusCode: 500,
          body: "fail to large json",
          isBase64Encoded: false
      });
    });
  }

  // collect API Stage and Request Path parameters
  const stageVars:APIGatewayProxyEventStageVariables = event.stageVariables??{};
  // Extract the bucket name from stage variables
  const bucketName = stageVars?.testBucketName;
  if (bucketName===undefined) {
    return new Promise<APIGatewayProxyResult>((resolve, reject)=> {
        resolve({
            statusCode: 500,
            body: "fail to extract bucket name from stage variables",
            isBase64Encoded: false
        });
    });
  }
  const objectKey = uuid4();
  // activate client
  const s3Client = new S3Client();
  // prepare and run first put object command
  const putCommand:PutObjectCommand = new PutObjectCommand({
    Body: eventStr,
    Bucket: bucketName,
    Key: objectKey
  });
  try {
    const putResponse = await s3Client.send(putCommand);
  } catch (error) {
    return new Promise<APIGatewayProxyResult>((resolve, reject)=> {
      resolve({
          statusCode: 500,
          body: "fail to put object to the bucket",
          isBase64Encoded: false
      });
    });
  }

  // wait a little
  await new Promise(f => setTimeout(f, 100));

  // now create and run delete command
  const deleteCommand:DeleteObjectsCommand = new DeleteObjectsCommand({
    Bucket: bucketName,
    Delete: {
      Objects: [ { Key: objectKey } ]
    }
  });
  try {
    const deleteResponse = await s3Client.send(deleteCommand);
  } catch (error) {
    return new Promise<APIGatewayProxyResult>((resolve, reject)=> {
      resolve({
          statusCode: 500,
          body: "fail to delete object from the bucket",
          isBase64Encoded: false
      });
    });
  }

  return new Promise<APIGatewayProxyResult>((resolve, reject)=> {
    resolve({
        statusCode: 200,
        body: eventStr,
        isBase64Encoded: false
    });
  });

};