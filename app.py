'''
Â© 2024 Daniil Sokolov <daniil.sokolov@webcloudai.com>
MIT License
'''
from aws_cdk import App, Tags
import sys
import json
import logging
# NOTE that we're logging into stderr
logging.basicConfig(level=logging.INFO, stream=sys.stderr, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
_top_logger = logging.getLogger(__name__)

from infra.ApplicationStack import ApplicationStack, ACCESS
from infra.CrossApiStack import ApiInvocationRoleStack

# We'll load pregenerated by gen_keys.py public key in JWKS format
# It'll be used in Authorizer to simulate the call to IdP jwks endpoint
with open("jwks_response.json", "r") as f:
    simulated_jwks_response = json.dumps(json.load(f))

app = App()
# First we need to create Role that will be assumed by Test application when invoke API with IAM access
# we'll send create Role to all stacks so it'll be their responsibility to use it or not
# see infra.ApplicationStack for details
role_name = f"ApiTestRole"
invocationRoleConstruct = ApiInvocationRoleStack(
    app, f"ApiTestRoleStack",
    api_invocation_role_name=role_name
)
# Now we'll create Stacks for every supported ACCESS type
for access in ACCESS:
    oneStack = ApplicationStack(
        app, f"ApiTest{access.value.capitalize()}",
        access_type=access,
        iam_invocation_role=invocationRoleConstruct.role,
        simulated_jwks_response=simulated_jwks_response,
    )
    Tags.of(oneStack).add("project", "ApiGwLatencyTest")

app.synth()
